# Winter comparison

This notebook calculates mean monthly values for each data variable, and then compares mean values between winter 2018-19 and winter 2019-20. This allows us to visualize any differences between the two winter seasons.
 
 
**Input**:
 - NETCDF4 file from the jupyter book's google bucket
 
 
 **Output**: 
  - Line plots displayed in notebook

```{tip}
Try running this notebook in Google Colab! Toggle over the rocketship icon at the top of the page and click Colab to open a new window and run the notebook. <br><br>To run a single cell, type **Shift+Enter**. To run the whole notebook, under **Runtime** click **Run all**. Note that you will have to run the notebook from the very beginning and load all the Google Colab dependencies for the code to work.
```

#this cell will load dependencies for running the notebook in Google Colab
#this cell may take a while to run
import sys

#if code is running in google colab, run these cells to install neccessary libraries
if 'google.colab' in sys.modules: 
    !apt-get install -qq libgdal-dev libproj-dev
    !pip install --no-binary shapely shapely --force
    !pip install -q pyproj
    !pip install cartopy
    !pip install netcdf4
    !pip install xarray==0.16.0 

## Import notebook dependencies

import os
import numpy as np
import xarray as xr
import pandas as pd
import scipy.interpolate
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import pyproj
from datetime import date
import matplotlib.pyplot as plt
import numpy.ma as ma
from textwrap import wrap

#axes needed for plotting
from matplotlib.axes import Axes
from cartopy.mpl.geoaxes import GeoAxes
GeoAxes._pcolormesh_patched = Axes.pcolormesh

# Ignore warnings in the notebook to improve display
# You might want to remove this when debugging/writing new code
import warnings
#warnings.filterwarnings('ignore')
 
#increase resolution for notebook outputs
%matplotlib inline 
%config InlineBackend.figure_format = 'retina' 

#import utils function 
if 'utils.py' not in os.listdir(os.getcwd()): 
    !gsutil cp gs://icesat2-book-data/utils.py ./
import utils

## Load data into notebook
Copy file from the book's google bucket and load into an xarray dataset. 

!gsutil -m cp gs://icesat2-book-data/icesat2-book-winter-data.nc ./
dataset = xr.open_dataset('icesat2-book-winter-data.nc')

## Restrict dataset to region of interest

#define a list of keys corresponding to the region of interest
regionKeyList = [10,11,12,13,15] #Inner Arctic

#restrict data to that region
dataset = utils.restrictRegionally(dataset, regionKeyList)

## Calculate mean monthly values for each data variable
Define a function that calculates and plots mean monthly values for each data variable.

def compareWinters(dataset, dataVar):
    """ Plots mean monthly ice thickness for two winter seasons. 
    
    Args: 
        dataset (xr Dataset): dataset generated by Load_IS2 notebook

    Returns: 
        Figure displayed in notebook 
     
    Restrictions: 
        dataset input needs to contain the following coordinates: mean_ice_thickness_unc, mean_ice_thickness, mean_MYI_thickness, mean_FYI_thickness 
    """
    
    #calculate monthly means 
    means = dataset[dataVar].mean(dim = ['x','y'], skipna = True)
        
    #initialize figure & axes 
    fig = plt.figure()
    ax = plt.axes([0,0,1,1])
    title = fig.suptitle('Winter comparison: ' + dataset[dataVar].attrs['long_name'] + ' (' + dataset[dataVar].attrs['units'] + ')', y = 1.15, fontsize = 'x-large', wrap = True, horizontalalignment = 'center')
        #add title describing regions with data 
    if 'regions with data' in list(dataset.attrs.keys()): 
        regionsText = dataset.attrs['regions with data']
        regionsTitle = ax.text(x = 0.5, y = 1.04, s = 'Region/s: ' + regionsText, size = 12, transform=ax.transAxes, fontsize = 'large', horizontalalignment = 'center')
    gridlines = plt.grid(b = True, linestyle = '--', alpha = 0.4) #add gridlines 
    
    #get list of months for plotting x axis 
    winterMonths = list(pd.to_datetime(utils.getWinterDateRange(2018, 2019)).strftime('%B'))

    #plot data for winter 1
    meansWinter1 = means.sel(time = utils.getWinterDateRange(2018, 2019))
    ax.plot(winterMonths, meansWinter1.values, color = 'royalblue', linestyle = '--', marker = 'o', label = 'Winter ' + str(2018)[2:4] + '-' + str(2019)[2:4])
    
    #plot data for winter 2
    meansWinter2 = means.sel(time = utils.getWinterDateRange(2019, 2020))
    ax.plot(winterMonths, meansWinter2.values, color = 'darkgoldenrod', linestyle = '-', marker = 's', label = 'Winter ' + str(2019)[2:4] + '-' + str(2020)[2:4])

    #add legend & labels
    ax.legend(loc = 'best', fontsize = 10)
    ax.set_ylabel(dataset[dataVar].attrs['long_name'])
    ax.set_xlabel('Month')
 
    plt.show()

## Call function to plot data 
Call the function on different data variables in the dataset to visualize how the mean values differed between winter seasons.

### ICESat-2 ice thickness

compareWinters(dataset, 'ice_thickness_filled')

### PIOMAS ice thickness

compareWinters(dataset, 'PIOMAS_ice_thickness')

### OSI-SAF ice type
Ice type is either multi-year ice (set to 1) or first-year ice (set to 0). 

compareWinters(dataset, 'ice_type_filled')

### ERA5 2-meter temperature 

compareWinters(dataset, 't2m')

### ERA5 mean surface downward long-wave radiation flux

compareWinters(dataset, 'msdwlwrf')